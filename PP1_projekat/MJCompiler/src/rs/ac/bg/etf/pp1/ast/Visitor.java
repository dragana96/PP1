// generated with ast extension for cup
// version 0.8
// 19/7/2019 23:32:1


package rs.ac.bg.etf.pp1.ast;

public interface Visitor { 

    public void visit(Unmatched Unmatched);
    public void visit(DeclarationList DeclarationList);
    public void visit(MethodDecl MethodDecl);
    public void visit(Mulop Mulop);
    public void visit(VarDeclaration VarDeclaration);
    public void visit(InterfaceMethodDeclList InterfaceMethodDeclList);
    public void visit(InterfaceDecl InterfaceDecl);
    public void visit(Matched Matched);
    public void visit(Relop Relop);
    public void visit(Assignop Assignop);
    public void visit(MethodType MethodType);
    public void visit(CondTermList CondTermList);
    public void visit(NumConstList NumConstList);
    public void visit(ImplementingOptional ImplementingOptional);
    public void visit(StatementList StatementList);
    public void visit(RelopExprOptional RelopExprOptional);
    public void visit(Addop Addop);
    public void visit(ErrorIf ErrorIf);
    public void visit(CallParamList CallParamList);
    public void visit(TypeList TypeList);
    public void visit(Factor Factor);
    public void visit(CondTerm CondTerm);
    public void visit(CondFactList CondFactList);
    public void visit(GlobalVarDecl GlobalVarDecl);
    public void visit(ConstList ConstList);
    public void visit(Designator Designator);
    public void visit(InterfaceMethodDecl InterfaceMethodDecl);
    public void visit(Term Term);
    public void visit(MethodDeclOptional MethodDeclOptional);
    public void visit(FormParsList FormParsList);
    public void visit(FormParsOptional FormParsOptional);
    public void visit(CallParams CallParams);
    public void visit(ConstValue ConstValue);
    public void visit(ActParsWithParen ActParsWithParen);
    public void visit(LocalVarDeclarationList LocalVarDeclarationList);
    public void visit(ExtendingOptional ExtendingOptional);
    public void visit(EnumList EnumList);
    public void visit(FormParDecl FormParDecl);
    public void visit(GlobalVarDeclaration GlobalVarDeclaration);
    public void visit(VarDeclList VarDeclList);
    public void visit(ErrorAssign ErrorAssign);
    public void visit(DesignatorStatementOrNot DesignatorStatementOrNot);
    public void visit(DesignatorStatement DesignatorStatement);
    public void visit(Decl Decl);
    public void visit(ConditionOrNot ConditionOrNot);
    public void visit(ExprMinus ExprMinus);
    public void visit(Statement Statement);
    public void visit(VarDecl VarDecl);
    public void visit(CondFact CondFact);
    public void visit(MethodDeclList MethodDeclList);
    public void visit(ConstDeclarationSingle ConstDeclarationSingle);
    public void visit(Expresion Expresion);
    public void visit(GlobalVarDeclList GlobalVarDeclList);
    public void visit(OpMod OpMod);
    public void visit(OpDivide OpDivide);
    public void visit(OpMultiply OpMultiply);
    public void visit(OpMinus OpMinus);
    public void visit(OpPlus OpPlus);
    public void visit(OpLeq OpLeq);
    public void visit(OpLess OpLess);
    public void visit(OpMeq OpMeq);
    public void visit(OpMore OpMore);
    public void visit(OpDiff OpDiff);
    public void visit(OpEqs OpEqs);
    public void visit(OpEq OpEq);
    public void visit(NoCondition NoCondition);
    public void visit(YesCondition YesCondition);
    public void visit(NoDesignatorStatement NoDesignatorStatement);
    public void visit(YesDesignatorStatement YesDesignatorStatement);
    public void visit(NoRelopExpr NoRelopExpr);
    public void visit(RelopExpr RelopExpr);
    public void visit(ConditionFact ConditionFact);
    public void visit(NoConditionFactList NoConditionFactList);
    public void visit(ConditionFactList ConditionFactList);
    public void visit(ConditionTerm ConditionTerm);
    public void visit(NoConditionTermList NoConditionTermList);
    public void visit(ConditionTermList ConditionTermList);
    public void visit(Condition Condition);
    public void visit(NoActualParDesignator NoActualParDesignator);
    public void visit(ActualParDesignator ActualParDesignator);
    public void visit(FactorExpr FactorExpr);
    public void visit(FactorNewArray FactorNewArray);
    public void visit(FactorNew FactorNew);
    public void visit(FactorBool FactorBool);
    public void visit(FactorChar FactorChar);
    public void visit(FactorNumber FactorNumber);
    public void visit(FactorDesignatorFunction FactorDesignatorFunction);
    public void visit(FactorDesignator FactorDesignator);
    public void visit(TermFactor TermFactor);
    public void visit(TermMulopFactor TermMulopFactor);
    public void visit(ExprAddop ExprAddop);
    public void visit(ExprTerm ExprTerm);
    public void visit(ExprWithoutMinus ExprWithoutMinus);
    public void visit(ExprMin ExprMin);
    public void visit(Expr Expr);
    public void visit(SingleParam SingleParam);
    public void visit(MultipleParams MultipleParams);
    public void visit(NoParamList NoParamList);
    public void visit(ParamList ParamList);
    public void visit(DesignatorArray DesignatorArray);
    public void visit(DesignatorDot DesignatorDot);
    public void visit(DesignatorValue DesignatorValue);
    public void visit(ErrorAssignDerived1 ErrorAssignDerived1);
    public void visit(DesignatorDecrement DesignatorDecrement);
    public void visit(DesignatorIncrement DesignatorIncrement);
    public void visit(DesignatorMethodCall DesignatorMethodCall);
    public void visit(ErrAssignment ErrAssignment);
    public void visit(DessignatorAssign DessignatorAssign);
    public void visit(ErrorIfDerived1 ErrorIfDerived1);
    public void visit(ErrorStmt ErrorStmt);
    public void visit(ListOfStatements ListOfStatements);
    public void visit(PrintStatementWithoutNumConst PrintStatementWithoutNumConst);
    public void visit(PrintStatementWithNumConst PrintStatementWithNumConst);
    public void visit(ReadStatement ReadStatement);
    public void visit(ReturnStatement ReturnStatement);
    public void visit(ContinueStatement ContinueStatement);
    public void visit(BreakStatement BreakStatement);
    public void visit(ErrorIfMatched ErrorIfMatched);
    public void visit(ForStatement ForStatement);
    public void visit(MatchedIf MatchedIf);
    public void visit(DesignatorStStatement DesignatorStStatement);
    public void visit(UnmatchedFor UnmatchedFor);
    public void visit(ErrorIfUnmatched1 ErrorIfUnmatched1);
    public void visit(ErrorIfUnmatched ErrorIfUnmatched);
    public void visit(UnmatchedIfElse UnmatchedIfElse);
    public void visit(UnmatchedIf UnmatchedIf);
    public void visit(NoStmtList NoStmtList);
    public void visit(StmtList StmtList);
    public void visit(UnmatchedStmt UnmatchedStmt);
    public void visit(MatchedStmt MatchedStmt);
    public void visit(VoidMethodType VoidMethodType);
    public void visit(ReturnMethodType ReturnMethodType);
    public void visit(MethodName MethodName);
    public void visit(StartMethodSt StartMethodSt);
    public void visit(MethodDeclaration MethodDeclaration);
    public void visit(NoMethodDeclarationList NoMethodDeclarationList);
    public void visit(MethodDeclarationList MethodDeclarationList);
    public void visit(ErrForm ErrForm);
    public void visit(FormParArr FormParArr);
    public void visit(FormParDeclaration FormParDeclaration);
    public void visit(OneFormPars OneFormPars);
    public void visit(MoreFormPars MoreFormPars);
    public void visit(NoFormalParams NoFormalParams);
    public void visit(FormalParamsYes FormalParamsYes);
    public void visit(InterfaceMethodDeclaration InterfaceMethodDeclaration);
    public void visit(NoInterfaceMethodDeclarationLst NoInterfaceMethodDeclarationLst);
    public void visit(InterfaceMethodDeclarationLst InterfaceMethodDeclarationLst);
    public void visit(InterfaceDeclaration InterfaceDeclaration);
    public void visit(EnumWithValue EnumWithValue);
    public void visit(EnumNoValue EnumNoValue);
    public void visit(NoNumConstListNoComma NoNumConstListNoComma);
    public void visit(NumConstListComma NumConstListComma);
    public void visit(EnumDecl EnumDecl);
    public void visit(NoMethodDeclarationsInClass NoMethodDeclarationsInClass);
    public void visit(MethodDeclarationsInClass MethodDeclarationsInClass);
    public void visit(NoMoreTypesImplementing NoMoreTypesImplementing);
    public void visit(ListOfTypesImplementing ListOfTypesImplementing);
    public void visit(NotImplementing NotImplementing);
    public void visit(Implementing Implementing);
    public void visit(NotExtending NotExtending);
    public void visit(Extending Extending);
    public void visit(ClassDecl ClassDecl);
    public void visit(NoLocalVarDeclList NoLocalVarDeclList);
    public void visit(LocalVarDeclList LocalVarDeclList);
    public void visit(LError LError);
    public void visit(LVarArray LVarArray);
    public void visit(LVarDeclaration LVarDeclaration);
    public void visit(LSingleVarDeclaration LSingleVarDeclaration);
    public void visit(LVarDeclarationList LVarDeclarationList);
    public void visit(LVarDeclError LVarDeclError);
    public void visit(LVarDecl LVarDecl);
    public void visit(Brackets Brackets);
    public void visit(GError1 GError1);
    public void visit(GVarArray GVarArray);
    public void visit(GVarDeclaration GVarDeclaration);
    public void visit(GSingleVarDeclaration GSingleVarDeclaration);
    public void visit(GVarDeclarationList GVarDeclarationList);
    public void visit(GlobalVarDeclarationError GlobalVarDeclarationError);
    public void visit(GVarDecl GVarDecl);
    public void visit(Type Type);
    public void visit(ConstBool ConstBool);
    public void visit(ConstChar ConstChar);
    public void visit(ConstNumber ConstNumber);
    public void visit(ConstListDerived2 ConstListDerived2);
    public void visit(ConstListDerived1 ConstListDerived1);
    public void visit(ConstDecl ConstDecl);
    public void visit(ConstDeclaration ConstDeclaration);
    public void visit(InterfaceDeclarationInDeclList InterfaceDeclarationInDeclList);
    public void visit(EnumDeclaration EnumDeclaration);
    public void visit(ClassDeclaration ClassDeclaration);
    public void visit(GlobalVarDeclaration1 GlobalVarDeclaration1);
    public void visit(ConstDeclaration1 ConstDeclaration1);
    public void visit(NoDeclarationLst NoDeclarationLst);
    public void visit(DeclarationLst DeclarationLst);
    public void visit(ProgName ProgName);
    public void visit(Program Program);

}

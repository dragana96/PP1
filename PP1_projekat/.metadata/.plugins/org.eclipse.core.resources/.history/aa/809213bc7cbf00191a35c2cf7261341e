package rs.ac.bg.etf.pp1;

import java.util.Stack;
import java.util.Iterator;

import rs.ac.bg.etf.pp1.ast.*;
import rs.etf.pp1.symboltable.*;
import rs.etf.pp1.symboltable.concepts.*;

import org.apache.log4j.Logger;

public class SemanticAnalyzer extends VisitorAdaptor {

	int globalVarDeclCount = 0;
	int varDeclCount = 0;
	int constDeclCount = 0;
	int printCallCount = 0;
	boolean errorDetected = false;

	Obj currentMethod = null;
	Struct currentMethodType;
	boolean returnFound = false;
	int nVars;
	Struct currentType = null;
	int currentLevel = 0;
	Stack<Obj> paramStack = new Stack<Obj>();
	Stack<Integer> numParamStack = new Stack<Integer>();

	Logger log = Logger.getLogger(getClass());

	public void report_error(String message, SyntaxNode info) {
		errorDetected = true;
		StringBuilder msg = new StringBuilder(message);
		int line = (info == null) ? 0 : info.getLine();
		if (line != 0)
			msg.append(" na liniji ").append(line);
		log.error(msg.toString());
	}

	public void report_info(String message, SyntaxNode info) {
		StringBuilder msg = new StringBuilder(message);
		int line = (info == null) ? 0 : info.getLine();
		if (line != 0)
			msg.append(" na liniji ").append(line);
		log.info(msg.toString());
	}
	
	
	//---------------------------------------- PROGRAM -------------------------------------------------

		public void visit(ProgName progName) {

			report_info("Pocetak programa  " + progName.getProgramName(), progName);
			// Pravi se novi Obj cvor sa prosledjenim atributima kind, name i type, pa se zatim ubacuje u tabelu simbola. 
			// Povratna vrednost: 
			// novostvoreni cvor, ako cvor sa tim imenom nije vec postojao u tabeli simbola.
			// postojeci cvor iz tabele simbola, ako je doslo do greske jer smo pokusali da u tabelu simbola
			// za opseg ubacimo cvor sa imenom koje vec postoji.
			progName.obj = TabExtended.insert(Obj.Prog, progName.getProgramName(), TabExtended.noType);
			TabExtended.openScope(); // otvaranje novog opsega

		}

		public void visit(Program program) {

			// moramo da ulancamo sve lokalne simbole
			TabExtended.chainLocalSymbols(program.getProgName().obj);
			TabExtended.closeScope(); // zatvaramo scope

		}
		
		
		//---------------------------------------------------- TIP ------------------------------------------------------------

		public void visit(Type type) {

			// proveravamo da li se radi o tipu
			// U hes tabeli opsega trazi Obj cvor sa imenom name, pocevsi od
			// najugnezdenijeg opsega, pa redom kroz opsege na nizim nivoima. 
			// Povratna vrednost: 
			//- pronadjeni Obj cvor, ako je pretrazivanje bilo uspesno. 
			// -Tab.noObj objekat, ako je pretrazivanje bilo neuspesno.
			Obj typeNode = TabExtended.find(type.getTypeName());
			if (typeNode == TabExtended.noObj) {
				report_error("Greska: Nije pronadjen tip " + type.getTypeName() + " u tabeli simbola", type);
				type.struct = TabExtended.noType; // povratna vrednost
			} else {
				if (Obj.Type == typeNode.getKind()) {
					type.struct = typeNode.getType();
				} else {
					report_error("Greska: Ime " + type.getTypeName() + " ne predstavlja tip ", type);
					type.struct = TabExtended.noType;
				}

			}
			currentType = type.struct;
		}

		
		
		
		//---------------------------------------- GLOBALNE PROMENLJIVE  -------------------------------------------------
		public void visit(GVarDeclaration globalVar) {
			globalVarDeclCount++;
			
			// moramo izvrsiti proveru da li je vec deklarisana
			// tek onda mozemo da ubacimo u listu simbola

			if (TabExtended.currentScope().findSymbol(globalVar.getGlobalVarName()) != null) {
				report_error("Greska na liniji " + globalVar.getLine() + ", promenljiva " + globalVar.getGlobalVarName()
						+ " je vec deklarisana", null);
			} else {
				report_info("Deklarisana globalna promenljiva " + globalVar.getGlobalVarName(), globalVar);
				TabExtended.insert(Obj.Var, globalVar.getGlobalVarName(), currentType);
			}
		}

		public void visit(GVarArray globalVarArray) {
			globalVarDeclCount++;
			// moramo izvrsiti proveru da li je vec deklarisana
			// tek onda mozemo da ubacimo u listu simbola

			if (TabExtended.currentScope().findSymbol(globalVarArray.getGlobalVarName()) != null) {
				report_error("Greska na liniji " + globalVarArray.getLine() + ", niz " + globalVarArray.getGlobalVarName()
						+ " je vec deklarisan", null);
			} else {
				report_info("Deklarisan globalni niz " + globalVarArray.getGlobalVarName(), globalVarArray);
				TabExtended.insert(Obj.Var, globalVarArray.getGlobalVarName(), currentType);
			}
		}

		
		
	
	
}
